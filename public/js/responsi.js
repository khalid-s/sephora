// Generated by CoffeeScript 1.6.3
/*
Copyright (c) 2013 Olivier Hardy

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/


(function() {
  var $, readyBound;

  readyBound = false;

  $ = window.$$ = {};

  $.toArray = function(iterable) {
    var length, results;
    if (!iterable) {
      return [];
    }
    if (iterable === 'object' && 'toArray' in iterable) {
      return iterable.toArray();
    }
    length = iterable.length || 0;
    results = new Array(length);
    while (length--) {
      results[length] = iterable[length];
    }
    return results;
  };

  $.bindReady = function(callback) {
    var callback2;
    if (readyBound) {
      return;
    }
    callback2 = function() {
      readyBound = true;
      return callback();
    };
    if (document.addEventListener) {
      return document.addEventListener("DOMContentLoaded", (function() {
        document.removeEventListener("DOMContentLoaded", arguments.callee, false);
        return callback2();
      }), false);
    } else if (document.attachEvent) {
      document.attachEvent("onreadystatechange", function() {
        if (document.readyState === "complete") {
          document.detachEvent("onreadystatechange", arguments.callee);
          return callback2();
        }
      });
      if (document.documentElement.doScroll && window === window.top) {
        return (function() {
          var error;
          try {
            document.documentElement.doScroll("left");
          } catch (_error) {
            error = _error;
            setTimeout(arguments.callee, 0);
            return;
          }
          return callback2();
        })();
      }
    }
  };

  $.preventDefault = function(evt) {
    if (evt.preventDefault) {
      evt.preventDefault();
    } else {
      evt.returnValue = false;
    }
    return false;
  };

  $.getOffset = function(el) {
    var result, _x, _y;
    _x = 0;
    _y = 0;
    while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
      _x += el.offsetLeft - el.scrollLeft;
      _y += el.offsetTop - el.scrollTop;
      el = el.offsetParent;
    }
    result = {
      top: _y,
      left: _x
    };
    return result;
  };

  $.closest = function(elem, selector) {
    var matchesSelector;
    matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;
    if (matchesSelector == null) {
      return $.closestTag(elem, selector);
    }
    while (elem) {
      if (matchesSelector.bind(elem)(selector)) {
        return elem;
      } else {
        elem = elem.parentNode;
      }
    }
    return false;
  };

  $.closestTag = function(elem, tag) {
    while (elem) {
      if (elem.tagName === tag) {
        return elem;
      } else {
        elem = elem.parentNode;
      }
    }
    return false;
  };

  $.hasClass = function(el, cl) {
    var regex;
    regex = new RegExp("(?:\\s|^)" + cl + "(?:\\s|$)");
    return (el != null) && (el.className != null) && !!el.className.match(regex);
  };

  $.addClass = function(el, classes) {
    var cls, _i, _len, _ref;
    _ref = classes.split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cls = _ref[_i];
      if (!$.hasClass(el, cls)) {
        el.className = (el.className || '') + " " + cls;
      }
    }
    return true;
  };

  $.addClassToMany = function(selector, classes) {
    var elt, _i, _len, _ref;
    _ref = Sizzle(selector);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elt = _ref[_i];
      $.addClass(elt, classes);
    }
    return true;
  };

  $.removeClass = function(el, classes) {
    var cls, regex, _i, _len, _ref;
    _ref = classes.split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cls = _ref[_i];
      regex = new RegExp("(?:\\s|^)" + cls + "(?:\\s|$)");
      if (el.className != null) {
        el.className = el.className.replace(regex, " ");
      }
    }
    return true;
  };

  $.removeClassToMany = function(selector, classes) {
    var elt, _i, _len, _ref;
    _ref = Sizzle(selector);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elt = _ref[_i];
      $.removeClass(elt, classes);
    }
    return true;
  };

  $.toggleClass = function(el, cl) {
    if ($.hasClass(el, cl)) {
      $.removeClass(el, cl);
    } else {
      $.addClass(el, cl);
    }
    return true;
  };

  $.getScrollTop = function() {
    var B, D;
    if (typeof pageYOffset !== "undefined" && pageYOffset !== null) {
      return pageYOffset;
    } else {
      B = document.body;
      D = document.documentElement;
      if (!D.clientHeight) {
        D = B;
      }
      return D.scrollTop;
    }
  };

  $.addEvent = function(evnt, elem, func) {
    if (elem.addEventListener) {
      return elem.addEventListener(evnt, func, false);
    } else if (elem.attachEvent) {
      return elem.attachEvent("on" + evnt, func);
    } else {
      return elem[evnt] = func;
    }
  };

  $.hide = function(elt) {
    if (elt != null) {
      return elt.style.display = 'none';
    }
  };

  $.show = function(elt) {
    if (elt != null) {
      return elt.style.display = '';
    }
  };

  $.getWindowHeight = function() {
    var height;
    height = 0;
    if (typeof window.innerHeight === 'number') {
      height = window.innerHeight;
    } else if (document.documentElement && document.documentElement.clientHeight) {
      height = document.documentElement.clientHeight;
    } else if (document.body && document.body.clientHeight) {
      height = document.body.clientHeight;
    }
    return height;
  };

  $.heightFor = function(elt) {
    var boundingClientRect;
    boundingClientRect = elt.getBoundingClientRect();
    return parseInt(boundingClientRect.bottom, 10) - parseInt(boundingClientRect.top, 10);
  };

}).call(this);
